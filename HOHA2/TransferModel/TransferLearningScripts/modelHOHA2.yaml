model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 64,
        layers: [
                 !obj:pylearn2_ECCV2014.customCpuDotMaxout.CpuConvMaxout {
                     layer_name: 'h0',
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     output_channels: 10000,
                     num_pieces: 1,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h2',
                     irange: .005,
                     num_units: 480,
                     num_pieces: 2,
                     max_col_norm: 1.9
                 },
                 !obj:pylearn2_ECCV2014.meanAvgPrecSigmoidHOHA2.Sigmoid {
                    monitor_style: 'tagging',
                    max_col_norm: 1.9365,
                    layer_name: 'y',
                    dim: 12,
                    irange: .005,
                    targets_accumulator_file: "/Tmp/torabi/ImprovedfeatureHOHA2HDF/targets_acc.temp",
                    outputs_accumulator_file: "/Tmp/torabi/ImprovedfeatureHOHA2HDF/outputs_acc.temp",
                    dummy_channels: [
                        "min_avg_prec",
                        "mean_avg_prec",
                        "max_avg_prec",
                        "avg_prec_AnswerPhone",
                        "avg_prec_DriveCar",
                        "avg_prec_Eat",
                        "avg_prec_FightPerson",
                        "avg_prec_GetOutCar",
                        "avg_prec_HandShake",
                        "avg_prec_HugPerson",
                        "avg_prec_Kiss",
                        "avg_prec_Run",
                        "avg_prec_SitDown",
                        "avg_prec_SitUp",
                        "avg_prec_StandUp",
                    ],
                },
            ],
       input_space: !obj:pylearn2.space.Conv2DSpace {
           shape: [1, 100],
           num_channels: 426,
           axes: ['c', 0, 1, 'b'],
       },
   }