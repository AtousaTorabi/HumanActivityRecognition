!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2_ECCV2014.atousaDatasetHOHA2.AtousaDataset {
        which_set: 'train',
        nbSamples: 100,
        axes: ['c', 0, 1, 'b'],
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 64,
        layers: [
                 !obj:pylearn2_ECCV2014.customCpuDotMaxoutMeanMax.CpuConvMaxout {
                     layer_name: 'h0',
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     output_channels: 3000,
                     num_pieces: 1,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h2',
                     irange: .005,
                     num_units: 480,
                     num_pieces: 2,
                     max_col_norm: 1.9
                 },
                 #!obj:pylearn2_ECCV2014.mlp3HOHA2.Sigmoid {
                 #    monitor_style: 'tagging',
                 #    #max_col_norm: 1.9365,
                 #    layer_name: 'y',
                 #    dim: 12,
                 #    irange: .005
                 #},
                !obj:pylearn2_ECCV2014.meanAvgPrecSigmoidHOHA2.Sigmoid {
                    monitor_style: 'tagging',
                    max_col_norm: 1.9365,
                    layer_name: 'y',
                    dim: 12,
                    irange: .005,
                    targets_accumulator_file: "targets_acc.temp",
                    outputs_accumulator_file: "outputs_acc.temp",
                    dummy_channels: [
                        "min_avg_prec",
                        "mean_avg_prec",
                        "max_avg_prec",
                        "avg_prec_AnswerPhone",
                        "avg_prec_Drive",
                        "avg_prec_Eat",
                        "avg_prec_FightPerson",
                        "avg_prec_GetOutCar",
                        "avg_prec_HandShake",
                        "avg_prec_HugPerson",
                        "avg_prec_Kiss",
                        "avg_prec_Run",
                        "avg_prec_SitDown",
                        "avg_prec_SitUp",
                        "avg_prec_StandUp",
                    ],
                },
            ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [1, 100],
            num_channels: 426,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        train_iteration_mode: 'batchwise_shuffled_sequential',
        learning_rate: .3,
        init_momentum: .9,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2_ECCV2014.atousaDatasetHOHA2.AtousaDataset {
                    which_set: 'valid',
                    nbSamples: 100,
                    axes: ['c', 0, 1, 'b'],
                },
            },   
        #cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
        #    input_include_probs: { 'h0' : 1., 'h2': 1., 'y': 1. },
        #    input_scales: { 'h0': 1., 'h2': 1., 'y': 1. }
        #},
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs:[
              !obj:pylearn2.costs.mlp.dropout.Dropout {
                 input_include_probs: { 'h0' : 1., 'h2': 1., 'y': 1. },
                 input_scales: { 'h0': 1., 'h2': 1., 'y': 1. }
               },
               !obj:pylearn2.costs.mlp.WeightDecay {
                 coeffs: [ .0006, 0., .0006 ]
               }
           ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_mistagging",
            prop_decrease: 0.,
            N: 10000
        },
        #update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
         #   start: 300,
          #  decay_factor: 1.00004,
            # min_lr: .000001
        #},
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_mean_avg_prec',
             save_path: "maxout_bestMAP_HOHA2TEST.pkl",
             higher_is_better: True,
        },
        !obj:pylearn2_ECCV2014.meanAvgPrecSigmoidHOHA2.MeanAveragePrecisionExtension {
            outputsFile: "outputs_acc.temp",
            targetsFile: "targets_acc.temp",
            channelNameMin: "y_min_avg_prec",
            channelNameMean: "y_mean_avg_prec",
            channelNameMax: "y_max_avg_prec",
            channelNamesIndividual: 
                [
                    "y_avg_prec_AnswerPone",
                    "y_avg_prec_DriveCar",
                    "y_avg_prec_Eat",
                    "y_avg_prec_FightPerson",
                    "y_avg_prec_GetOutCar",
                    "y_avg_prec_HandShake",
                    "y_avg_prec_HugPerson",
                    "y_avg_prec_Kiss",
                    "y_avg_prec_Run",
                    "y_avg_prec_SitDown",
                    "y_avg_prec_SitUp",
                    "y_avg_prec_StandUp",
                ],
        },
          ],
    save_path: "latestHOHA2TEST.pkl",
    save_freq: 1
}
